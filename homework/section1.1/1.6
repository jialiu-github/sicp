(define (square x) (* x x))

(define (improve guess x)
        (average guess (/ x guess)))

(define (average x y)
        (/ (+ x y) 2))

(define (good-enough? guess x)
        (< (abs (- (square guess) x)) 0.001))

(define (sqrt-iter guess x)
        (if (good-enough? guess x)
        guess
        (sqrt-iter (improve guess x) x)))

(define (new-if pred then-c else-c)
        (cond (pred then-c)
              (else else-c)))

#|
(define (sqrt-iter guess x)
        (new-if (good-enough? guess x)
        guess
        (sqrt-iter (improve guess x) x)))
 |#
 
(define (sqrt x)
        (sqrt-iter 1.0 x))

(sqrt 9)

#|
For the new-if sqrt-iter, Lisp will evaluate the arguments of the function named new-if. This mean Lisp will evaluate "else-c" first but it can't get the result from the endless iter.
|#


