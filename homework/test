(define (equal a b) (= a b))
//change from master
(equal 10 10)
(equal (+ 5 3 4) 12)
(equal (- 9 1) 8)
(equal (/ 6 2) 3)
(equal (+ (* 2 4) (- 4 6)) 6)

(define (div-interval x y)
    (if (> 0 (* (lower-bound y) (upper-bound y)))
        error
        (mul-interval x
                    (make-interval (/ 1.0 (upper-bound y))
                                    (/ 1.0 (lower-bound y)))))
)

(define (par2 r1 r2)
    (let ((one (make-interval 1 1)))
        (div-interval one
                      (add-interval (div-interval one r1)
                      (div-interval one r2)))))