(define (accumulate-recursive combiner null-value term a next b)
    (if (> a b)
        null-value
        (combiner (term a)
                  (accumulate-recursive combiner null-value term (next a) next b))))
(define (accumulate-iteractive combiner null-value term a next b)
    (define (iter a result)
        (if (> a b)
            result
            (iter (next a) (combiner (term a) result)))
    )
    (iter a null-value)
)
(define (sum term a next b)
    (accumulate-recursive + 0 term a next b))
(define (sum-iteractive term a next b)
    (accumulate-iteractive + 0 term a next b))
(define (product term a next b)
    (accumulate-recursive  * 1 term a next b))
(define (product-iteractive term a next b)
    (accumulate-iteractive * 1 term a next b))
    
(load "inc.rkt")
(load "identity.rkt")
(product identity 1 inc 4)
(product-iteractive identity 1 inc 4)
(sum identity 0 inc 10)
(sum-iteractive identity 0 inc 10)